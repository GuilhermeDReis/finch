// Diagn√≥stico completo do sistema de notifica√ß√µes
// Cole este script no console do navegador

console.log('üîç DIAGN√ìSTICO COMPLETO DO SISTEMA');
console.log('==================================');

const diagnose = async () => {
  try {
    const debug = window.__supabase_debug;
    if (!debug) {
      console.error('‚ùå Debug helpers n√£o dispon√≠veis. Recarregue a p√°gina.');
      return;
    }

    console.log('\n1Ô∏è‚É£ VERIFICANDO AUTENTICA√á√ÉO');
    console.log('---------------------------');
    
    const { data: user, error: userError } = await debug.supabase.auth.getUser();
    
    if (userError) {
      console.error('‚ùå Erro de autentica√ß√£o:', userError);
      return;
    }
    
    if (!user?.user) {
      console.error('‚ùå Usu√°rio n√£o est√° logado');
      return;
    }
    
    console.log('‚úÖ Usu√°rio logado:', {
      id: user.user.id,
      email: user.user.email,
      created_at: user.user.created_at
    });

    console.log('\n2Ô∏è‚É£ TESTANDO BUSCA DIRETA NO BANCO');
    console.log('----------------------------------');
    
    // Busca direta usando o client Supabase
    const { data: directNotifications, error: directError } = await debug.supabase
      .from('notifications')
      .select('*')
      .eq('user_id', user.user.id)
      .order('created_at', { ascending: false });
    
    if (directError) {
      console.error('‚ùå Erro na busca direta:', directError);
      
      if (directError.code === '42501') {
        console.info('üí° Erro RLS - pol√≠ticas de seguran√ßa bloqueando acesso');
      } else if (directError.code === '42P01') {
        console.info('üí° Tabela n√£o existe');
      }
      return;
    }
    
    console.log(`‚úÖ Busca direta encontrou ${directNotifications.length} notifica√ß√µes:`);
    console.table(directNotifications);

    console.log('\n3Ô∏è‚É£ TESTANDO VIA NOTIFICATION SERVICE');
    console.log('------------------------------------');
    
    try {
      const serviceNotifications = await debug.notificationService.getNotifications({ limit: 20 });
      console.log(`‚úÖ Service encontrou ${serviceNotifications.length} notifica√ß√µes:`);
      console.table(serviceNotifications);
    } catch (serviceError) {
      console.error('‚ùå Erro no notification service:', serviceError);
    }

    console.log('\n4Ô∏è‚É£ VERIFICANDO RLS POLICIES');
    console.log('---------------------------');
    
    // Verificar pol√≠ticas RLS
    const { data: policies, error: policiesError } = await debug.supabase.rpc('get_user_permissions', {});
    
    if (policiesError) {
      console.warn('‚ö†Ô∏è N√£o foi poss√≠vel verificar pol√≠ticas RLS:', policiesError);
    } else {
      console.log('‚úÖ Pol√≠ticas RLS:', policies);
    }

    console.log('\n5Ô∏è‚É£ TESTANDO INSER√á√ÉO DIRETA');
    console.log('-----------------------------');
    
    const testNotification = {
      user_id: user.user.id,
      title: `üß™ Teste Direto ${new Date().toLocaleTimeString()}`,
      message: 'Notifica√ß√£o criada pelo diagn√≥stico para testar inser√ß√£o direta',
      type: 'info',
      category: 'system',
      is_read: false
    };
    
    console.log('üì§ Criando notifica√ß√£o de teste...');
    
    const { data: insertResult, error: insertError } = await debug.supabase
      .from('notifications')
      .insert(testNotification)
      .select()
      .single();
    
    if (insertError) {
      console.error('‚ùå Erro na inser√ß√£o:', insertError);
    } else {
      console.log('‚úÖ Notifica√ß√£o inserida:', insertResult);
      
      // Aguardar um pouco e verificar se chegou via real-time
      console.log('‚è≥ Aguardando 3 segundos para verificar real-time...');
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Verificar se apareceu no estado do componente
      console.log('üîç Verificando se chegou via real-time...');
    }

    console.log('\n6Ô∏è‚É£ TESTANDO ACESSO √Ä API REST DIRETAMENTE');
    console.log('------------------------------------------');
    
    // Obter token atual
    const session = await debug.supabase.auth.getSession();
    const token = session.data.session?.access_token;
    
    if (!token) {
      console.error('‚ùå Token de acesso n√£o encontrado');
      return;
    }
    
    console.log('‚úÖ Token obtido:', token.substring(0, 20) + '...');
    
    // Fazer requisi√ß√£o REST direta
    const restResponse = await fetch(`https://hjwnykqbdecjrbqpweak.supabase.co/rest/v1/notifications?user_id=eq.${user.user.id}&order=created_at.desc`, {
      headers: {
        'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imhqd255a3FiZGVjanJicXB3ZWFrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI3MzA0ODAsImV4cCI6MjA2ODMwNjQ4MH0.oHMNZl0J5SyiCl7KkEGpNROUiENd3A9Q1VCuxioW4gY',
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!restResponse.ok) {
      const errorText = await restResponse.text();
      console.error('‚ùå Erro REST API:', restResponse.status, errorText);
    } else {
      const restData = await restResponse.json();
      console.log(`‚úÖ API REST retornou ${restData.length} notifica√ß√µes:`);
      console.table(restData);
    }

    console.log('\n7Ô∏è‚É£ VERIFICANDO REAL-TIME SUBSCRIPTION');
    console.log('-------------------------------------');
    
    // Verificar status da subscription
    const channels = debug.supabase.getChannels();
    console.log('üì° Canais ativos:', channels.length);
    
    channels.forEach((channel, index) => {
      console.log(`üì∫ Canal ${index + 1}:`, {
        topic: channel.topic,
        state: channel.state,
        joinedAt: channel.joinedAt
      });
    });

    console.log('\nüéØ RESUMO DO DIAGN√ìSTICO');
    console.log('========================');
    console.log('‚úÖ Sistema configurado e executando diagn√≥stico');
    console.log('üìä Verifique os resultados acima para identificar o problema');
    
  } catch (error) {
    console.error('‚ùå Erro durante diagn√≥stico:', error);
  }
};

// Fun√ß√£o para testar Real-time isoladamente
window.testRealtimeIsolated = async () => {
  const debug = window.__supabase_debug;
  if (!debug) {
    console.error('‚ùå Debug helpers n√£o dispon√≠veis');
    return;
  }

  const { data: user } = await debug.supabase.auth.getUser();
  if (!user?.user) {
    console.error('‚ùå Usu√°rio n√£o logado');
    return;
  }

  console.log('üß™ Teste Real-time Isolado');
  console.log('==========================');

  // Criar subscription espec√≠fica para teste
  const testChannel = debug.supabase
    .channel('test-notifications')
    .on('postgres_changes', {
      event: 'INSERT',
      schema: 'public', 
      table: 'notifications',
      filter: `user_id=eq.${user.user.id}`
    }, (payload) => {
      console.log('üîî REAL-TIME FUNCIONOU!', payload);
      console.log('üéâ Notifica√ß√£o recebida:', payload.new);
    })
    .subscribe((status) => {
      console.log('üì° Status da subscription:', status);
      
      if (status === 'SUBSCRIBED') {
        console.log('‚úÖ Subscription ativa! Agora insira uma notifica√ß√£o no SQL Editor:');
        console.log(`
INSERT INTO public.notifications (user_id, title, message, type, category, is_read) 
VALUES ('${user.user.id}', 'Teste Real-time', 'Testando...', 'info', 'general', false);
        `);
      }
    });

  // Guardar refer√™ncia para cleanup
  window.__testChannel = testChannel;
  
  console.log('‚è≥ Subscription de teste criada. Execute o SQL acima.');
};

// Executar diagn√≥stico
diagnose();
