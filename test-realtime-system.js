// Script de teste para Real-time - Execute no console do navegador
// Este script testa o sistema completo de notifica√ß√µes em tempo real

console.log('üß™ Teste Automatizado do Sistema Real-time');
console.log('==========================================');

// Fun√ß√£o para aguardar um tempo
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// Fun√ß√£o para testar o sistema completo
const testRealtimeSystem = async () => {
  try {
    console.log('\n1Ô∏è‚É£ Verificando conex√£o e helpers...');
    
    const debug = window.__supabase_debug;
    if (!debug) {
      console.error('‚ùå Debug helpers n√£o encontrados. Recarregue a p√°gina.');
      return;
    }
    
    console.log('‚úÖ Debug helpers encontrados');
    
    // Verificar autentica√ß√£o
    const { data: user } = await debug.supabase.auth.getUser();
    if (!user?.user) {
      console.error('‚ùå Usu√°rio n√£o autenticado');
      return;
    }
    
    console.log('‚úÖ Usu√°rio autenticado:', user.user.email);
    
    console.log('\n2Ô∏è‚É£ Testando sistema Real-time...');
    
    // Criar uma notifica√ß√£o diretamente no banco via API
    const testNotification = {
      user_id: user.user.id,
      title: `üöÄ Teste Autom√°tico ${Date.now()}`,
      message: 'Esta notifica√ß√£o foi criada pelo teste automatizado. Se voc√™ v√™ este toast, o Real-time est√° funcionando!',
      type: 'success',
      category: 'system',
      is_read: false
    };
    
    console.log('üì§ Criando notifica√ß√£o de teste via API...');
    
    const response = await fetch('https://hjwnykqbdecjrbqpweak.supabase.co/rest/v1/notifications', {
      method: 'POST',
      headers: {
        'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imhqd255a3FiZGVjanJicXB3ZWFrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI3MzA0ODAsImV4cCI6MjA2ODMwNjQ4MH0.oHMNZl0J5SyiCl7KkEGpNROUiENd3A9Q1VCuxioW4gY',
        'Authorization': `Bearer ${debug.supabase.auth.session()?.access_token}`,
        'Content-Type': 'application/json',
        'Prefer': 'return=representation'
      },
      body: JSON.stringify(testNotification)
    });
    
    if (!response.ok) {
      throw new Error(`API Error: ${response.status} ${await response.text()}`);
    }
    
    const created = await response.json();
    console.log('‚úÖ Notifica√ß√£o criada via API:', created);
    
    console.log('\n3Ô∏è‚É£ Aguardando Real-time (5 segundos)...');
    console.log('üëÄ Observe se aparece um toast de notifica√ß√£o na tela!');
    
    await sleep(5000);
    
    console.log('\n4Ô∏è‚É£ Verificando se a notifica√ß√£o foi recebida...');
    
    // Verificar no estado atual se a notifica√ß√£o chegou
    const currentNotifications = await debug.notificationService.getNotifications({ limit: 5 });
    const foundTest = currentNotifications.find(n => n.title.includes('Teste Autom√°tico'));
    
    if (foundTest) {
      console.log('‚úÖ SUCCESS: Notifica√ß√£o encontrada no estado!');
      console.log('üéâ Sistema Real-time est√° funcionando perfeitamente!');
    } else {
      console.log('‚ö†Ô∏è Notifica√ß√£o n√£o encontrada no estado local');
      console.log('üí° Isso pode ser normal - verifique se viu o toast na tela');
    }
    
    console.log('\n5Ô∏è‚É£ Teste de limpeza...');
    
    // Deletar a notifica√ß√£o de teste
    try {
      await debug.notificationService.deleteNotification(created[0]?.id || foundTest?.id);
      console.log('‚úÖ Notifica√ß√£o de teste removida');
    } catch (e) {
      console.log('‚ö†Ô∏è Erro ao remover (normal):', e.message);
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
};

// Executar teste
testRealtimeSystem();

// Fun√ß√£o para teste manual simples
window.testRealtimeSimple = async () => {
  const debug = window.__supabase_debug;
  if (!debug) return console.error('Debug helpers n√£o encontrados');
  
  const { data: user } = await debug.supabase.auth.getUser();
  if (!user?.user) return console.error('Usu√°rio n√£o autenticado');
  
  // Inserir via service (que usa o client Supabase interno)
  try {
    const result = await debug.notificationService.createNotification({
      title: '‚ö° Teste Manual Real-time',
      message: 'Teste simples criado via service layer',
      type: 'info',
      category: 'general',
      is_read: false
    });
    
    console.log('‚úÖ Notifica√ß√£o criada via service:', result);
    console.log('üëÄ Observe o toast na tela!');
  } catch (error) {
    console.error('‚ùå Erro:', error);
  }
};

console.log('\nüí° Comandos dispon√≠veis:');
console.log('- testRealtimeSystem() - Executa teste completo novamente');
console.log('- window.testRealtimeSimple() - Teste simples manual');
