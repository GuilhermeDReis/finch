// Script de debug completo para notifica√ß√µes
// Cole este c√≥digo no console do navegador (F12)

console.log('üîç Debug do Sistema de Notifica√ß√µes');
console.log('=====================================');

// Fun√ß√£o para obter o cliente supabase
const getSupabase = () => {
  // Tenta diferentes formas de acessar o supabase
  if (typeof window !== 'undefined') {
    if (window.supabase) return window.supabase;
    if (window.__supabase) return window.__supabase;
  }
  
  // Se n√£o encontrar, pode ser que esteja importado no m√≥dulo
  console.error('‚ùå Cliente Supabase n√£o encontrado no window object');
  return null;
};

// Fun√ß√£o principal de debug
const debugNotifications = async () => {
  const supabase = getSupabase();
  if (!supabase) {
    console.error('‚ùå N√£o foi poss√≠vel encontrar o cliente Supabase');
    return;
  }

  console.log('‚úÖ Cliente Supabase encontrado');

  try {
    // 1. Verificar autentica√ß√£o
    console.log('\n1Ô∏è‚É£ Verificando autentica√ß√£o...');
    const { data: user, error: userError } = await supabase.auth.getUser();
    
    if (userError) {
      console.error('‚ùå Erro de autentica√ß√£o:', userError);
      return;
    }
    
    if (!user?.user) {
      console.warn('‚ö†Ô∏è Usu√°rio n√£o est√° autenticado');
      return;
    }
    
    console.log('‚úÖ Usu√°rio autenticado:', {
      id: user.user.id,
      email: user.user.email
    });

    // 2. Verificar se a tabela existe
    console.log('\n2Ô∏è‚É£ Verificando tabela de notifica√ß√µes...');
    const { data: tables, error: tablesError } = await supabase
      .from('notifications')
      .select('id')
      .limit(1);
    
    if (tablesError) {
      console.error('‚ùå Erro ao acessar tabela:', tablesError);
      if (tablesError.code === '42P01') {
        console.info('üí° Tabela n√£o existe. Execute create_notifications_table.sql');
      } else if (tablesError.code === '42501') {
        console.info('üí° Erro de RLS. Verifique as pol√≠ticas de seguran√ßa');
      }
      return;
    }
    
    console.log('‚úÖ Tabela de notifica√ß√µes acess√≠vel');

    // 3. Buscar notifica√ß√µes do usu√°rio
    console.log('\n3Ô∏è‚É£ Buscando notifica√ß√µes do usu√°rio...');
    const { data: notifications, error: notError } = await supabase
      .from('notifications')
      .select('*')
      .eq('user_id', user.user.id)
      .order('created_at', { ascending: false });
    
    if (notError) {
      console.error('‚ùå Erro ao buscar notifica√ß√µes:', notError);
      return;
    }
    
    console.log(`‚úÖ ${notifications.length} notifica√ß√µes encontradas:`);
    console.table(notifications);

    // 4. Criar notifica√ß√£o de teste se n√£o houver nenhuma
    if (notifications.length === 0) {
      console.log('\n4Ô∏è‚É£ Criando notifica√ß√£o de teste...');
      const { data: newNotification, error: insertError } = await supabase
        .from('notifications')
        .insert({
          user_id: user.user.id,
          title: 'üß™ Teste do Console',
          message: 'Esta notifica√ß√£o foi criada pelo script de debug. Sistema funcionando!',
          type: 'success',
          category: 'general',
          is_read: false
        })
        .select()
        .single();
      
      if (insertError) {
        console.error('‚ùå Erro ao criar notifica√ß√£o:', insertError);
      } else {
        console.log('‚úÖ Notifica√ß√£o de teste criada:', newNotification);
        console.log('üîÑ Recarregue a p√°gina para ver a notifica√ß√£o na central');
      }
    }

    // 5. Estat√≠sticas
    console.log('\n5Ô∏è‚É£ Estat√≠sticas:');
    const stats = {
      total: notifications.length,
      unread: notifications.filter(n => !n.is_read).length,
      byType: {},
      byCategory: {}
    };
    
    notifications.forEach(n => {
      stats.byType[n.type] = (stats.byType[n.type] || 0) + 1;
      stats.byCategory[n.category] = (stats.byCategory[n.category] || 0) + 1;
    });
    
    console.table(stats);

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
};

// Executar debug
debugNotifications();

// Fun√ß√£o global para criar notifica√ß√£o
window.createTestNotification = async () => {
  const supabase = getSupabase();
  if (!supabase) return;
  
  const { data: user } = await supabase.auth.getUser();
  if (!user?.user) {
    console.error('‚ùå Usu√°rio n√£o autenticado');
    return;
  }
  
  const titles = [
    'Nova Transa√ß√£o',
    'Importa√ß√£o Conclu√≠da', 
    'Limite do Cart√£o',
    'Pagamento Processado',
    'Categoriza√ß√£o Autom√°tica'
  ];
  
  const messages = [
    'Transa√ß√£o de R$ -45,80 foi registrada.',
    'Importa√ß√£o de 23 transa√ß√µes conclu√≠da com sucesso.',
    'Voc√™ atingiu 70% do limite do cart√£o.',
    'Pagamento de R$ 1.200,00 foi processado.',
    '15 transa√ß√µes foram categorizadas automaticamente.'
  ];
  
  const types = ['info', 'success', 'warning', 'success', 'info'];
  const categories = ['transaction', 'background_job', 'system', 'transaction', 'background_job'];
  
  const index = Math.floor(Math.random() * titles.length);
  
  const { data, error } = await supabase
    .from('notifications')
    .insert({
      user_id: user.user.id,
      title: titles[index],
      message: messages[index],
      type: types[index],
      category: categories[index],
      is_read: false
    })
    .select()
    .single();
  
  if (error) {
    console.error('‚ùå Erro ao criar:', error);
  } else {
    console.log('‚úÖ Notifica√ß√£o criada:', data);
    console.log('üîÑ Clique em "Atualizar" na central para ver');
  }
};

console.log('\nüí° Comandos dispon√≠veis:');
console.log('- window.createTestNotification() - Cria notifica√ß√£o aleat√≥ria');
console.log('- debugNotifications() - Executa debug completo novamente');
